@using SHUNetMVC.Abstraction.Model.View;
@model FormDefinition

@{
    string CurrentControllerName = Convert.ToString(HttpContext.Current.Request.RequestContext.RouteData.Values["Controller"]);
    var formUrl = CurrentControllerName;
    var modalTitle = $"Add New {Model.Title}";
    if (Model.State == FormState.Create)
    {
        formUrl = CurrentControllerName + "/Create";
    }
    else
    {
        modalTitle = $"Edit {Model.Title}";
        formUrl = CurrentControllerName + "/Edit";
    }

}
<style>
    .k-grid-header, .k-grid-header .k-header {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }

    .k-grid-toolbar {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }

    .k-button {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
        transition-duration: 0.4s;
    }

    .k-button:hover {
        background-color: #8fa2b1;
        border-color: #A5CAE6;
    }
</style>

<form action="@formUrl" method="post" onsubmit="event.preventDefault()" form-state="@Model.State">
    <div class="modal-body">
        <div>
            @{
                var formSectionIdx = 0;
            }
            @foreach (var fieldSection in Model.FieldSections)
            {
                formSectionIdx++;

                if (string.IsNullOrEmpty(fieldSection.SectionName))
                {
                    <div class="mb-3">
                        @Html.Partial("Component/Form/_Fields", fieldSection.Fields)
                    </div>
                }
                else
                {
                    <div class="accordion mb-3">
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#formSection_@formSectionIdx">
                                    @fieldSection.SectionName
                                </button>
                            </h2>
                            <div id="formSection_@formSectionIdx" class="accordion-collapse collapse show">
                                <div class="accordion-body">
                                    <input id="blockID" type="hidden" value="" name="blockID" />
                                    @Html.Partial("Component/Form/_Fields", fieldSection.Fields)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="table-title">
            <div class="heading-Text">
                List Partner
            </div>
            <div class="table-subtitle">
                This is the list of Partner
            </div>
        </div>
        @if (Model.State == FormState.Create)
        {
            <div>
                @(Html.Kendo().Grid<SHUNetMVC.Abstraction.Model.Dto.MDExplorationBlockPartnerDto>()
                    .Name("gridEco")
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.PartnerName);
                        columns.Bound(c => c.PI);
                    })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Events(events => events.Error("error_handler"))
                        .Model(model =>
                        {
                            model.Id(p => p.PartnerID);
                            model.Field(p => p.PartnerID).Editable(false);
                        })
                        .PageSize(20)
                        .Read(read => read.Action("ParticipantList_Read", "Economic").Data("getClientBlockID"))
                    )
            )
            </div>
        }
        else
        {
            <div>
                @(Html.Kendo().Grid<SHUNetMVC.Abstraction.Model.Dto.MDExplorationBlockPartnerDto>()
                    .Name("gridEco")
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.PartnerName);
                        columns.Bound(c => c.PI);
                    })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Events(events => events.Error("error_handler"))
                        .Model(model =>
                        {
                            model.Id(p => p.PartnerID);
                            model.Field(p => p.PartnerID).Editable(false);
                        })
                        .PageSize(20)
                        .Read(read => read.Action("ParticipantList_Read", "Economic").Data("getClientBlockIDEdit"))
                    )
            )
            </div>
        }
    </div>

    <!--<div class="modal-footer">

    </div>-->
    <div class="modal-block-overlay"></div>
</form>


@* PREPARE MODAL GRID LOOKUP*@
<div class="modal-content modal-lookup">
    <div class="modal-header">
        <h5 class="modal-title">Select <span id="lookup-title">Select Item</span></h5>
        <button type="button" class="btn-close" onclick="hideLookupModal()"></button>
    </div>
    <div class="modal-body">

    </div>
</div>
