@using Kendo.Mvc.UI
@using SHUNetMVC.Abstraction.Model.View;
@model FormDefinition
@{
    string CurrentControllerName = Convert.ToString(HttpContext.Current.Request.RequestContext.RouteData.Values["Controller"]);
    var formUrl = CurrentControllerName;
    var modalTitle = $"Add New {Model.Title}";
    var formState = "create";
    if (Model.State == FormState.Create)
    {
        formUrl = Model.Title + "/Create";
    }
    else
    {
        formState = "edit";
        modalTitle = $"Edit {Model.Title}";
        formUrl = Model.Title + "/Edit";
    }

}
<style>
    .k-grid-header, .k-grid-header .k-header {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }

    .k-grid-toolbar {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }

    .k-button {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
        transition-duration: 0.4s;
    }

        .k-button:hover {
            background-color: #8fa2b1;
            border-color: #A5CAE6;
        }
</style>
<form action="@formUrl" method="post" onsubmit="event.preventDefault()" form-state="@Model.State">
    <div class="table-title">
        <div class="heading-Text">
            Contingen Resources
        </div>
        <div class="table-subtitle">
            This is the list of Contingen Resources
        </div>
    </div>
    <div class="modal-body">
        <input id="formStateCont" type="hidden" value="@formState" />
        <input id="paramIDCont" type="hidden" value="@Model.paramID" />
        <div>
            @(Html.Kendo().Grid<SHUNetMVC.Abstraction.Model.Dto.TXContingenResourcesDto>()
            .Name("gridCont")
            .Columns(columns =>
            {
                columns.Bound(p => p.xStructureID).Width(100);
                columns.Group(group1 => group1
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("Oil (MMBOE)")
                    .Columns(info =>
                    {
                        info.Bound(c => c.C1COil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        info.Bound(c => c.C2COil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        info.Bound(c => c.C3COil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                    })
                );
                columns.Group(group2 => group2
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("Gas (MMSCF)")
                    .Columns(info =>
                    {
                        info.Bound(c => c.C1CGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        info.Bound(c => c.C2CGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        info.Bound(c => c.C3CGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                    })
                );
                columns.Group(group3 => group3
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("Total (MBOE)")
                    .Columns(info =>
                    {
                        info.Bound(c => c.C1CTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                        info.Bound(c => c.C2CTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                        info.Bound(c => c.C3CTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                    })
                );
            })
            .ToolBar(toolBar =>
            {
                toolBar.Save();
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Pageable()
            .Selectable(selectable => selectable
            .Mode(GridSelectionMode.Multiple)
            .Type(GridSelectionType.Cell))
            .Navigatable()
            .AllowCopy(true)
            .Sortable()
            .Scrollable(x => x.Height(70))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler").Change("onChangeCont"))
                .Model(model =>
                {
                    model.Id(p => p.xStructureID);
                    model.Field(p => p.xStructureID).Editable(false);
                })
                .PageSize(20)
                .Read(read => read.Action("EditingCustomCR_Read", "ContingenResources").Data("getClientFormStateCont"))
                .Create(create => create.Action("EditingCustomCR_Create", "ContingenResources"))
                .Update(update => update.Action("EditingCustomCR_Update", "ContingenResources"))
                .Destroy(destroy => destroy.Action("EditingCustomCR_Destroy", "ContingenResources"))
            )
        )
        </div>
    </div>
</form>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function returnFalse() {
        return false;
    }
    function onChangeCont(e) {
        const numberFormatter = Intl.NumberFormat('en-US');
        if (e.field == "C1COil") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C1COil").val();
            firstItem["C1COil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C1COil"]) + (parseFloat(firstItem["C1CGas"]) * 0.1726)
            firstItem["C1CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
        if (e.field == "C1CGas") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C1CGas").val();
            firstItem["C1CGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C1COil"]) + (parseFloat(firstItem["C1CGas"]) * 0.1726)
            firstItem["C1CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
        if (e.field == "C2COil") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C2COil").val();
            firstItem["C2COil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C2COil"]) + (parseFloat(firstItem["C2CGas"]) * 0.1726)
            firstItem["C2CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
        if (e.field == "C2CGas") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C2CGas").val();
            firstItem["C2CGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C2COil"]) + (parseFloat(firstItem["C2CGas"]) * 0.1726)
            firstItem["C2CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
        if (e.field == "C3COil") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C3COil").val();
            firstItem["C3COil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C3COil"]) + (parseFloat(firstItem["C3CGas"]) * 0.1726)
            firstItem["C3CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
        if (e.field == "C3CGas") {
            var grid = $('#gridCont').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#C3CGas").val();
            firstItem["C3CGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["C3COil"]) + (parseFloat(firstItem["C3CGas"]) * 0.1726)
            firstItem["C3CTotal"] = parseFloat(test).toFixed(2);
            $('#gridCont').data("kendoGrid").refresh();
        }
    }
</script>