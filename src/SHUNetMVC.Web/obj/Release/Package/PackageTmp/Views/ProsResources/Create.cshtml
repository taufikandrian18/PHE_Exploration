@using Kendo.Mvc.UI
@using SHUNetMVC.Abstraction.Model.View;
@model FormDefinition
@{
    string CurrentControllerName = Convert.ToString(HttpContext.Current.Request.RequestContext.RouteData.Values["Controller"]);
    var formUrl = CurrentControllerName;
    var modalTitle = $"Add New {Model.Title}";
    var formState = "create";
    if (Model.State == FormState.Create)
    {
        formUrl = Model.Title + "/Create";
    }
    else
    {
        formState = "edit";
        modalTitle = $"Edit {Model.Title}";
        formUrl = Model.Title + "/Edit";
    }

}
<style>
    .k-grid-header, .k-grid-header .k-header {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }
    .k-grid-toolbar {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
    }
    .k-button {
        background-color: #D6E7F3;
        border-color: #A5CAE6;
        transition-duration: 0.4s;
    }
    .k-button:hover {
        background-color: #8fa2b1;
        border-color: #A5CAE6;
    }
</style>
<form action="@formUrl" method="post" onsubmit="event.preventDefault()" form-state="@Model.State">
    <div class="table-title">
        <div class="heading-Text">
            Prospective Resources
        </div>
        <div class="table-subtitle">
            This is the list of Prospective Resources Target
        </div>
    </div>
    <div style="padding-left:15px; margin-bottom:5px">
        <label>Download Template Copy Paste :</label>
        <a href="~/Assets/Template/Template_Pengisian_Exporation_Structure_Prospective_Resources_Target.xlsx" download>
            Template_Pengisian_Exporation_Structure_Prospective_Resources_Target
        </a>
    </div>
    <div class="modal-body">
        <input id="formState" type="hidden" value="@formState" />
        <input id="paramID" type="hidden" value="@Model.paramID" />
        <div>
            @(Html.Kendo().Grid<SHUNetMVC.Abstraction.Model.Dto.TXProsResourcesTargetDto>()
            .Name("grid")
            .Columns(columns =>
            {
                columns.Bound(p => p.TargetID).Width(100);
                columns.Bound(p => p.TargetName).Width(300).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Group(group1 => group1
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("In Place")
                    .Columns(info =>
                    {
                        info.Group(o => o.Title("Oil (MBO)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50InPlaceOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanInPlaceOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10InPlaceOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(g => g.Title("Gas (MMSCF)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50InPlaceGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanInPlaceGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10InPlaceGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(t => t.Title("Total (MBOE)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P50InPlaceTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.PMeanInPlaceTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P10InPlaceTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                            })
                        );
                    })
                );
                columns.Group(rf => rf
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("RF")
                    .Columns(rfValue =>
                    {
                        rfValue.Bound(c => c.RFOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        rfValue.Bound(c => c.RFGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                    })
                );
                columns.Group(group2 => group2
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("Recoverable Resources")
                    .Columns(info =>
                    {
                        info.Group(o => o.Title("Oil (MBO)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RecoverableOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50RecoverableOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanRecoverableOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10RecoverableOil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(g => g.Title("Gas (MMSCF)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RecoverableGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50RecoverableGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanRecoverableGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10RecoverableGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(t => t.Title("Total (MBOE)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RecoverableTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P50RecoverableTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.PMeanRecoverableTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P10RecoverableTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                            })
                        );
                    })
                );
                columns.Bound(p => p.HydrocarbonTypeParID).Sortable(false).Width(200).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFSR).Width(130).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFTM).Width(130).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFReservoir).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFClosure).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFContainment).Width(180).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFPGTotal).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Command(command => command.Destroy()).Width(250).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler").Change("onChangeTarget"))
                .Model(model =>
                {
                    model.Id(p => p.TargetID);
                    model.Field(p => p.TargetID).Editable(false);
                    model.Field(p => p.HydrocarbonTypeParID).DefaultValue(
                        ViewData["defaultCategory"] as string);
                })
                .PageSize(20)
                .Read(read => read.Action("EditingCustom_Read", "ProsResources").Data("getClientFormStateView"))
                .Create(create => create.Action("EditingCustom_Create", "ProsResources"))
                .Update(update => update.Action("EditingCustom_Update", "ProsResources"))
                .Destroy(destroy => destroy.Action("EditingCustom_Destroy", "ProsResources"))
            )
            .ToolBar(toolBar =>
            {
                toolBar.Create();
                toolBar.Save();
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(position: GridInsertRowPosition.Bottom))
            .Pageable()
            .Selectable(selectable => selectable
            .Mode(GridSelectionMode.Multiple)
            .Type(GridSelectionType.Cell))
            .Navigatable()
            .AllowCopy(true)
            .Scrollable(x => x.Height(250)))
        </div>
    </div>
    <div class="table-title">
        <div class="heading-Text">
            Total Recoverable Resources
        </div>
        <div class="table-subtitle">
            This is the list of Prospective Resources
        </div>
        @if (Model.State == FormState.Create)
        {
            <div class="row align-items-start">
                <div class="col" style="width:200px">
                    <label>Calculation Method :</label>
                </div>
                <div class="col">
                    <div class="mb-3" style="display:table-header-group;position:inherit;margin-left:300px;margin-top:10px">
                        <select id="recoverableResourceOption" class="form-select" style="width:180px">
                            <option value="0" selected>Select Calculation</option>
                            <option value="arithmethic">Arithmethic</option>
                            <option value="mzm">MZM</option>
                        </select>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row align-items-start">
                <div class="col" style="width:200px">
                    <label>Calculation Method :</label>
                </div>
                <div class="col">
                    <div class="mb-3" style="display: table-header-group; position: inherit; margin-left: 300px; margin-top: 10px;">
                        <select id="recoverableResourceOption" class="form-select">
                            @for (int i = 0; i < 3; i++)
                            {
                                if (i == 0)
                                {
                                    if (!string.IsNullOrEmpty(Model.Data.MethodParID))
                                    {
                                        if (Model.Data.MethodParID.Trim() == "0")
                                        {
                                            <option value="0" selected>Select Calculation</option>
                                        }
                                        else
                                        {
                                            <option value="0">Select Calculation</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="0">Select Calculation</option>
                                    }

                                }
                                else if (i == 2)
                                {
                                    if (!string.IsNullOrEmpty(Model.Data.MethodParID))
                                    {
                                        if (Model.Data.MethodParID.Trim() == "arithmethic")
                                        {
                                            <option value="arithmethic" selected>Arithmethic</option>
                                        }
                                        else
                                        {
                                            <option value="arithmethic">Arithmethic</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="arithmethic">Arithmethic</option>
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Model.Data.MethodParID))
                                    {
                                        if (Model.Data.MethodParID.Trim() == "mzm")
                                        {
                                            <option value="mzm" selected>MZM</option>
                                        }
                                        else
                                        {
                                            <option value="mzm">MZM</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="mzm">MZM</option>
                                    }
                                }

                            }
                        </select>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="modal-body">
        <div>
            @(Html.Kendo().Grid<SHUNetMVC.Abstraction.Model.Dto.TXProsResourceDto>()
            .Name("grid2")
            .Columns(columns =>
            {
                columns.Bound(p => p.xStructureID).Width(100);
                columns.Group(group1 => group1
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("In Place")
                    .Columns(info =>
                    {
                        info.Group(o => o.Title("Oil (MBO)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceOilPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50InPlaceOilPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanInPlaceOilPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10InPlaceOilPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(g => g.Title("Gas (MMSCF)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceGasPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50InPlaceGasPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanInPlaceGasPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10InPlaceGasPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(t => t.Title("Total (MBOE)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90InPlaceTotalPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P50InPlaceTotalPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.PMeanInPlaceTotalPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P10InPlaceTotalPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                            })
                        );
                    })
                );
                columns.Group(rf => rf
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("RF")
                    .Columns(rfValue =>
                    {
                        rfValue.Bound(c => c.RFOilPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                        rfValue.Bound(c => c.RFGasPR).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                    })
                );
                columns.Group(group1 => group1
                    .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                    .Title("Recoverable Resources")
                    .Columns(info =>
                    {
                        info.Group(o => o.Title("Oil (MBO)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RROil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50RROil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanRROil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10RROil).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(g => g.Title("Gas (MMSCF)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RRGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P50RRGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.PMeanRRGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                                location.Bound(c => c.P10RRGas).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                            })
                        );
                        info.Group(t => t.Title("Total (MBOE)")
                            .HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" })
                            .Columns(location =>
                            {
                                location.Bound(c => c.P90RRTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P50RRTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.PMeanRRTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                                location.Bound(c => c.P10RRTotal).Width(100).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" }).Editable("returnFalse");
                            })
                        );
                    })
                );
                columns.Bound(p => p.HydrocarbonTypePRParID).Sortable(false).Width(200).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFSRPR).Width(130).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFTMPR).Width(130).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFReservoirPR).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFClosurePR).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFContainmentPR).Width(180).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
                columns.Bound(p => p.GCFPGTotalPR).Width(160).HtmlAttributes(new { style = "text-align: center" }).HeaderHtmlAttributes(new { style = "text-align: center; justify-content: flex-end;" });
            })
            .ToolBar(toolBar =>
            {
                toolBar.Save();
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Pageable()
            .Selectable(selectable => selectable
            .Mode(GridSelectionMode.Multiple)
            .Type(GridSelectionType.Cell))
            .Navigatable()
            .AllowCopy(true)
            .Sortable()
            .Scrollable(x => x.Height(70))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler").Change("onChangeProsRecoverable"))
                .Model(model =>
                {
                    model.Id(p => p.xStructureID);
                    model.Field(p => p.xStructureID).Editable(false);
                    model.Field(p => p.HydrocarbonTypePRParID).DefaultValue(
                        ViewData["defaultCategory"] as string);
                })
                .PageSize(20)
                .Read(read => read.Action("EditingCustomPR_Read", "ProsResources").Data("getClientFormStateView"))
                .Create(create => create.Action("EditingCustomPR_Create", "ProsResources"))
                .Update(update => update.Action("EditingCustomPR_Update", "ProsResources"))
                .Destroy(destroy => destroy.Action("EditingCustomPR_Destroy", "ProsResources"))
            )
        )
        </div>
        @if (Model.State == FormState.Create)
        {
            <div class="mb-3" style="display:inline-block;margin-left:60px;margin-top:30px;margin-right:60px; width:90%;text-align:left">
                <table width="98%">
                    <thead>
                        <tr>
                            <th style="padding-bottom:8px">Current PG (%)</th>
                            <th style="padding-bottom:8px;padding-left:50px;">Expected PG (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input class="form-control text-box single-line" id="current" name="current" type="number" min="1" max="100" step=".01" placeholder="Input Current PG" onkeypress='validate(event)' maxlength="3" onchange='changeHandler(this)'>
                            </td>
                            <td style="padding-left:50px">
                                <input class="form-control text-box single-line" id="expected" name="expected" type="number" min="1" max="100" step=".01" placeholder="Input Expected PG" onkeypress='validate(event)' maxlength="3" onchange='changeHandler(this)'>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="mb-3" style="display: inline-block;margin-left:60px;margin-top:25px;margin-right:60px;width:90%;text-align: left">
                <table width="98%">
                    <thead>
                        <tr>
                            <th style="padding-bottom:8px">Current PG (%)</th>
                            <th style="padding-bottom:8px;padding-left:50px;">Expected PG (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input class="form-control text-box single-line" id="current" name="current" type="number" min="1" max="100" step=".01" value="@Model.Data.CurrentPG" placeholder="Input Current PG" onkeypress='validate(event)' maxlength="3" onchange='changeHandler(this)'>
                            </td>
                            <td style="padding-left:50px">
                                <input class="form-control text-box single-line" id="expected" name="expected" type="number" min="1" max="100" step=".01" value="@Model.Data.ExpectedPG" placeholder="Input Expected PG" onkeypress='validate(event)' maxlength="3" onchange='changeHandler(this)'>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
</form>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function validateMax(max) {
        var x = document.getElementById(max).value;
        if (x > 100) {
            alert("It can't be more than 100");
        }
    }
    function tsvJSON(tsv) {
        var lines = tsv.trim().split("\n");
        var result = [];
        var headers = lines[0].split("\t");
        for (var i = 1; i < lines.length; i++) {
            var obj = {};
            var currentline = lines[i].split("\t");
            for (var j = 0; j < headers.length; j++) {
                obj[headers[j].trim()] = currentline[j];
            }
            result.push(obj);
        }
        return result; //JSON
    }
    function returnFalse() {
        return false;
    }
    function onChangeTarget(e) {
        const numberFormatter = Intl.NumberFormat('en-US');
        if (e.field == "P90InPlaceOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90InPlaceOil").val();
            firstItem["P90InPlaceOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90InPlaceOil"]) + (parseFloat(firstItem["P90InPlaceGas"]) * 0.1726)
            firstItem["P90InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P90InPlaceGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90InPlaceGas").val();
            firstItem["P90InPlaceGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90InPlaceOil"]) + (parseFloat(firstItem["P90InPlaceGas"]) * 0.1726)
            firstItem["P90InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P50InPlaceOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50InPlaceOil").val();
            firstItem["P50InPlaceOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50InPlaceOil"]) + (parseFloat(firstItem["P50InPlaceGas"]) * 0.1726)
            firstItem["P50InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P50InPlaceGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50InPlaceGas").val();
            firstItem["P50InPlaceGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50InPlaceOil"]) + (parseFloat(firstItem["P50InPlaceGas"]) * 0.1726)
            firstItem["P50InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanInPlaceOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanInPlaceOil").val();
            firstItem["PMeanInPlaceOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanInPlaceOil"]) + (parseFloat(firstItem["PMeanInPlaceGas"]) * 0.1726)
            firstItem["PMeanInPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanInPlaceGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanInPlaceGas").val();
            firstItem["PMeanInPlaceGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanInPlaceOil"]) + (parseFloat(firstItem["PMeanInPlaceGas"]) * 0.1726)
            firstItem["PMeanInPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P10InPlaceOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10InPlaceOil").val();
            firstItem["P10InPlaceOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10InPlaceOil"]) + (parseFloat(firstItem["P10InPlaceGas"]) * 0.1726)
            firstItem["P10InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P10InPlaceGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10InPlaceGas").val();
            firstItem["P10InPlaceGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10InPlaceOil"]) + (parseFloat(firstItem["P10InPlaceGas"]) * 0.1726)
            firstItem["P10InPlaceTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P90RecoverableOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90RecoverableOil").val();
            firstItem["P90RecoverableOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90RecoverableOil"]) + (parseFloat(firstItem["P90RecoverableGas"]) * 0.1726)
            firstItem["P90RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P90RecoverableGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90RecoverableGas").val();
            firstItem["P90RecoverableGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90RecoverableOil"]) + (parseFloat(firstItem["P90RecoverableGas"]) * 0.1726)
            firstItem["P90RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P50RecoverableOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50RecoverableOil").val();
            firstItem["P50RecoverableOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50RecoverableOil"]) + (parseFloat(firstItem["P50RecoverableGas"]) * 0.1726)
            firstItem["P50RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P50RecoverableGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50RecoverableGas").val();
            firstItem["P50RecoverableGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50RecoverableOil"]) + (parseFloat(firstItem["P50RecoverableGas"]) * 0.1726)
            firstItem["P50RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanRecoverableOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanRecoverableOil").val();
            firstItem["PMeanRecoverableOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanRecoverableOil"]) + (parseFloat(firstItem["PMeanRecoverableGas"]) * 0.1726)
            firstItem["PMeanRecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanRecoverableGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanRecoverableGas").val();
            firstItem["PMeanRecoverableGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanRecoverableOil"]) + (parseFloat(firstItem["PMeanRecoverableGas"]) * 0.1726)
            firstItem["PMeanRecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P10RecoverableOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10RecoverableOil").val();
            firstItem["P10RecoverableOil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10RecoverableOil"]) + (parseFloat(firstItem["P10RecoverableGas"]) * 0.1726)
            firstItem["P10RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "P10RecoverableGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10RecoverableGas").val();
            firstItem["P10RecoverableGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10RecoverableOil"]) + (parseFloat(firstItem["P10RecoverableGas"]) * 0.1726)
            firstItem["P10RecoverableTotal"] = parseFloat(test).toFixed(2);
            $('#grid').data("kendoGrid").refresh();
        }
        if (e.field == "RFOil") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#RFOil").val();
            firstItem["RFOil"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "RFGas") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#RFGas").val();
            firstItem["RFGas"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFSR") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFSR").val();
            firstItem["GCFSR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFTM") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFTM").val();
            firstItem["GCFTM"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFReservoir") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFReservoir").val();
            firstItem["GCFReservoir"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFClosure") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFClosure").val();
            firstItem["GCFClosure"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFContainment") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFContainment").val();
            firstItem["GCFContainment"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFPGTotal") {
            var grid = $('#grid').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFPGTotal").val();
            firstItem["GCFPGTotal"] = parseFloat(dvalue).toFixed(2);
        }
    }
    function onChangeProsRecoverable(e) {
        const numberFormatter = Intl.NumberFormat('en-US');
        if (e.field == "P90InPlaceOilPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90InPlaceOilPR").val();
            firstItem["P90InPlaceOilPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90InPlaceOilPR"]) + (parseFloat(firstItem["P90InPlaceGasPR"]) * 0.1726)
            firstItem["P90InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P90InPlaceGasPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90InPlaceGasPR").val();
            firstItem["P90InPlaceGasPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90InPlaceOilPR"]) + (parseFloat(firstItem["P90InPlaceGasPR"]) * 0.1726)
            firstItem["P90InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P50InPlaceOilPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50InPlaceOilPR").val();
            firstItem["P50InPlaceOilPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50InPlaceOilPR"]) + (parseFloat(firstItem["P50InPlaceGasPR"]) * 0.1726)
            firstItem["P50InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P50InPlaceGasPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50InPlaceGasPR").val();
            firstItem["P50InPlaceGasPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50InPlaceOilPR"]) + (parseFloat(firstItem["P50InPlaceGasPR"]) * 0.1726)
            firstItem["P50InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanInPlaceOilPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanInPlaceOilPR").val();
            firstItem["PMeanInPlaceOilPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanInPlaceOilPR"]) + (parseFloat(firstItem["PMeanInPlaceGasPR"]) * 0.1726)
            firstItem["PMeanInPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanInPlaceGasPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanInPlaceGasPR").val();
            firstItem["PMeanInPlaceGasPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanInPlaceOilPR"]) + (parseFloat(firstItem["PMeanInPlaceGasPR"]) * 0.1726)
            firstItem["PMeanInPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P10InPlaceOilPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10InPlaceOilPR").val();
            firstItem["P10InPlaceOilPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10InPlaceOilPR"]) + (parseFloat(firstItem["P10InPlaceGasPR"]) * 0.1726)
            firstItem["P10InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P10InPlaceGasPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10InPlaceGasPR").val();
            firstItem["P10InPlaceGasPR"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10InPlaceOilPR"]) + (parseFloat(firstItem["P10InPlaceGasPR"]) * 0.1726)
            firstItem["P10InPlaceTotalPR"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P90RROil") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90RROil").val();
            firstItem["P90RROil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90RROil"]) + (parseFloat(firstItem["P90RRGas"]) * 0.1726)
            firstItem["P90RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P90RRGas") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P90RRGas").val();
            firstItem["P90RRGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P90RROil"]) + (parseFloat(firstItem["P90RRGas"]) * 0.1726)
            firstItem["P90RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P50RROil") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50RROil").val();
            firstItem["P50RROil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50RROil"]) + (parseFloat(firstItem["P50RRGas"]) * 0.1726)
            firstItem["P50RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P50RRGas") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P50RRGas").val();
            firstItem["P50RRGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P50RROil"]) + (parseFloat(firstItem["P50RRGas"]) * 0.1726)
            firstItem["P50RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanRROil") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanRROil").val();
            firstItem["PMeanRROil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanRROil"]) + (parseFloat(firstItem["PMeanRRGas"]) * 0.1726)
            firstItem["PMeanRRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "PMeanRRGas") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#PMeanRRGas").val();
            firstItem["PMeanRRGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["PMeanRROil"]) + (parseFloat(firstItem["PMeanRRGas"]) * 0.1726)
            firstItem["PMeanRRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P10RROil") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10RROil").val();
            firstItem["P10RROil"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10RROil"]) + (parseFloat(firstItem["P10RRGas"]) * 0.1726)
            firstItem["P10RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "P10RRGas") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#P10RRGas").val();
            firstItem["P10RRGas"] = parseFloat(dvalue).toFixed(2);
            var test = parseFloat(firstItem["P10RROil"]) + (parseFloat(firstItem["P10RRGas"]) * 0.1726)
            firstItem["P10RRTotal"] = parseFloat(test).toFixed(2);
            $('#grid2').data("kendoGrid").refresh();
        }
        if (e.field == "RFOilPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#RFOilPR").val();
            firstItem["RFOilPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "RFGasPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#RFGasPR").val();
            firstItem["RFGasPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFSRPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFSRPR").val();
            firstItem["GCFSRPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFTMPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFTMPR").val();
            firstItem["GCFTMPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFReservoirPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFReservoirPR").val();
            firstItem["GCFReservoirPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFClosurePR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFClosurePR").val();
            firstItem["GCFClosurePR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFContainmentPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFContainmentPR").val();
            firstItem["GCFContainmentPR"] = parseFloat(dvalue).toFixed(2);
        }
        if (e.field == "GCFPGTotalPR") {
            var grid = $('#grid2').data('kendoGrid');
            var selectedRows = grid.select();
            var firstItem = grid.dataItem('tr.k-grid-edit-row');
            var dvalue = $("#GCFPGTotalPR").val();
            firstItem["GCFPGTotalPR"] = parseFloat(dvalue).toFixed(2);
        }
    }
    function releasenumber_changed() {
        const numberFormatter = Intl.NumberFormat('en-US');
        var grid = $('#grid').data('kendoGrid');
        var selectedRows = grid.select();
        //var firstItem = $('#grid').data().kendoGrid.dataSource.data()[selectedRows.length - 1];
        var firstItem = grid.dataItem('tr.k-grid-edit-row');
        var ID = this.element[0].id;
        var valueNumber = this.value();
        firstItem[ID] = numberFormatter.format(parseFloat(valueNumber).toFixed(2));
    }
    function changeHandler(val) {
        if (Number(val.value) > 100) {
            val.value = 100
        }
    }
    document.getElementById('grid').addEventListener('paste', function (e) {
        var tsv;
        if (e.ctrlKey && (e.keyCode == 17)) {
            tsv = window.clipboardData.getData('Text');
        } else {
            tsv = e.clipboardData.getData('Text')
        }
        if (tsv) {
            const grid = $('#grid').data('kendoGrid');
            const pastedData = tsvJSON(tsv);
            console.log(pastedData);
            $.map(pastedData, function (val, i) {
                // Do something
                console.log(val);
                grid.dataSource.add(val).set("", { TargetName: true, P90InPlaceOil: true, P50InPlaceOil: true, PMeanInPlaceOil: true, P10InPlaceOil: true, P90InPlaceGas: true, P50InPlaceGas: true, PMeanInPlaceGas: true, P10InPlaceGas: true, P90InPlaceTotal: true, P50InPlaceTotal: true, PMeanInPlaceTotal: true, P10InPlaceTotal: true, RFOil: true, RFGas: true, P90RecoverableOil: true, P50RecoverableOil: true, PMeanRecoverableOil: true, P10RecoverableOil: true, P90RecoverableGas: true, P50RecoverableGas: true, PMeanRecoverableGas: true, P10RecoverableGas: true, P90RecoverableTotal: true, P50RecoverableTotal: true, PMeanRecoverableTotal: true, P10RecoverableTotal: true, HydrocarbonTypeParID: true, GCFSR: true, GCFTM: true, GCFReservoir: true, GCFClosure: true, GCFContainment: true, GCFPGTotal: true });
            });
        }
    });
</script>
